"""

Grid based Dijkstra planning

author: Atsushi Sakai(@Atsushi_twi)

"""

import matplotlib.pyplot as plt
import math

show_animation = True


class Dijkstra:

    def __init__(self, ox, oy, resolution, robot_radius):
        """
        Initialize map for planning  初始化地图

        ox: x position list of Obstacles [m]  障碍物的x坐标
        oy: y position list of Obstacles [m]  障碍物的y坐标
        resolution: grid resolution [m]
        rr: robot radius[m]
        """

        self.min_x = None
        self.min_y = None
        self.max_x = None
        self.max_y = None
        self.x_width = None
        self.y_width = None
        self.obstacle_map = None

        self.resolution = resolution  # 栅格的大小
        self.robot_radius = robot_radius  # 机器人半径
        self.calc_obstacle_map(ox, oy)  # 构建栅格地图
        self.motion = self.get_motion_model()  # 机器人运动方式

    class Node:
        def __init__(self, x, y, cost, parent_index):
            self.x = x  # index of grid栅格的索引
            self.y = y  # index of grid
            self.cost = cost  # g(n)代价值
            self.parent_index = parent_index  # index of previous Node 寻找路径时候用的

        def __str__(self):
            return str(self.x) + "," + str(self.y) + "," + str(
                self.cost) + "," + str(self.parent_index)

    def planning(self, sx, sy, gx, gy):
        """
        dijkstra path search

        input:
            s_x: start x position [m]
            s_y: start y position [m]
            gx: goal x position [m]
            gx: goal x position [m]

        output:
            rx: x position list of the final path
            ry: y position list of the final path
        """
        # round((position - minp) / self.resolution)将起始点坐标转化为节点形式
        start_node = self.Node(self.calc_xy_index(sx, self.min_x),
                               self.calc_xy_index(sy, self.min_y), 0.0, -1)

        goal_node = self.Node(self.calc_xy_index(gx, self.min_x),
                              self.calc_xy_index(gy, self.min_y), 0.0, -1)  # 起点 终点 代价 父节点  （因为都没有所以初始化为-1）
        # 字典的形式，可以通过key的值得到value的值
        open_set, closed_set = dict(), dict()  # key - value: hash表
        open_set[self.calc_index(start_node)] = start_node

        while 1:
            c_id = min(open_set, key=lambda o: open_set[o].cost)  # 取cost最小的节点
            current = open_set[c_id]

            # show graph
            if show_animation:  # pragma: no cover
                plt.plot(self.calc_position(current.x, self.min_x),
                         self.calc_position(current.y, self.min_y), "xc")
                # for stopping simulation with the esc key.
                plt.gcf().canvas.mpl_connect(
                    'key_release_event',
                    lambda event: [exit(0) if event.key == 'escape' else None])
                if len(closed_set.keys()) % 10 == 0:
                    plt.pause(0.001)

            # 判断是否是终点
            if current.x == goal_node.x and current.y == goal_node.y:
                print("Find goal")
                goal_node.parent_index = current.parent_index
                goal_node.cost = current.cost
                break

            # Remove the item from the open set
            del open_set[c_id]

            # Add it to the closed set
            closed_set[c_id] = current

            # expand search grid based on motion model
            for move_x, move_y, move_cost in self.motion:
                node = self.Node(current.x + move_x,
                                 current.y + move_y,
                                 current.cost + move_cost, c_id)
                n_id = self.calc_index(node)  # 节点所在栅格的位置 0-n  第几个栅格

                if n_id in closed_set:  # 如果已经收录到关闭集中，那继续
                    continue

                if not self.verify_node(node):  # 先判断邻接节点是否可行，判读有没有超过范围
                    continue

                if n_id not in open_set:  # 判断是否在开放集中  假设不在开放集中
                    open_set[n_id] = node  # Discover a new node
                else:
                    if open_set[n_id].cost >= node.cost:
                        # This path is the best until now. record it!
                        open_set[n_id] = node

        rx, ry = self.calc_final_path(goal_node, closed_set)

        return rx, ry

    def calc_final_path(self, goal_node, closed_set):
        # generate final course
        rx, ry = [self.calc_position(goal_node.x, self.min_x)], [
            self.calc_position(goal_node.y, self.min_y)]
        parent_index = goal_node.parent_index
        while parent_index != -1:
            n = closed_set[parent_index]
            rx.append(self.calc_position(n.x, self.min_x))
            ry.append(self.calc_position(n.y, self.min_y))
            parent_index = n.parent_index

        return rx, ry

    def calc_position(self, index, minp):
        pos = index * self.resolution + minp  # minp为偏移量
        return pos

    def calc_xy_index(self, position, minp):
        return round((position - minp) / self.resolution)  # （位置-最小值）/栅格大小，得到索引

    def calc_index(self, node):
        return node.y * self.x_width + node.x  # 几行*一行宽度+x坐标的值

    def verify_node(self, node):
        # 计算具体位置
        px = self.calc_position(node.x, self.min_x)
        py = self.calc_position(node.y, self.min_y)
        # 判断是否超出栅格位置
        if px < self.min_x:
            return False
        if py < self.min_y:
            return False
        if px >= self.max_x:
            return False
        if py >= self.max_y:
            return False
        # 判断是否是障碍物
        if self.obstacle_map[node.x][node.y]:
            return False

        return True

    def calc_obstacle_map(self, ox, oy):
        ''' 第1步：构建栅格地图 '''
        self.min_x = round(min(ox))
        self.min_y = round(min(oy))
        self.max_x = round(max(ox))
        self.max_y = round(max(oy))
        print("min_x:", self.min_x)
        print("min_y:", self.min_y)
        print("max_x:", self.max_x)
        print("max_y:", self.max_y)
        # (x的最大值-x最小值)/栅格大小   计算x方向有几个栅格
        self.x_width = round((self.max_x - self.min_x) / self.resolution)
        self.y_width = round((self.max_y - self.min_y) / self.resolution)
        print("x_width:", self.x_width)
        print("y_width:", self.y_width)

        # obstacle map generation
        # 初始化地图 用二维列表表示 内层   所有值初始化为False，表示没有设置障碍物
        # for循环的次数就是y方向的个数，外层就是x方向的个数
        self.obstacle_map = [[False for _ in range(self.y_width)]
                             for _ in range(self.x_width)]
        # 设置障碍物
        for ix in range(self.x_width):  # 第一二层循环遍历栅格ix  iy表示栅格在x方向和y方向的下标
            x = self.calc_position(ix, self.min_x)  # 通过下标计算他的位置
            for iy in range(self.y_width):
                y = self.calc_position(iy, self.min_y)
                for iox, ioy in zip(ox, oy):  # 第三层循环遍历障碍物
                    d = math.hypot(iox - x, ioy - y)  # 计算障碍物到栅格的距离
                    if d <= self.robot_radius:  # 如果距离比障碍物小，证明不能通过
                        self.obstacle_map[ix][iy] = True  # 将障碍物的栅格设置为true
                        break

    @staticmethod
    def get_motion_model():
        # dx, dy, cost  运动形式采用列表形式
        motion = [[1, 0, 1],  # 右 第三个数值表示步长
                  [0, 1, 1],  # 上
                  [-1, 0, 1],  # 左
                  [0, -1, 1],  # 下
                  [-1, -1, math.sqrt(2)],  # 左下
                  [-1, 1, math.sqrt(2)],  # 左上
                  [1, -1, math.sqrt(2)],  # 右上
                  [1, 1, math.sqrt(2)]]  # 右下

        return motion


def main():
    # start and goal position
    sx = -5.0  # [m]
    sy = -5.0  # [m]
    gx = 50.0  # [m]
    gy = 50.0  # [m]
    grid_size = 2.0  # [m] 栅格大小
    robot_radius = 1.0  # [m] 机器人半径

    # set obstacle positions   障碍物的位置
    ox, oy = [], []
    for i in range(-10, 60):  # 最下面的边界
        ox.append(i)
        oy.append(-10.0)
    for i in range(-10, 60):  # 最左面的边界
        ox.append(60.0)
        oy.append(i)
    for i in range(-10, 61):  # 最上面的边界
        ox.append(i)
        oy.append(60.0)
    for i in range(-10, 61):  # 最右面的边界
        ox.append(-10.0)
        oy.append(i)
    for i in range(-10, 40):
        ox.append(20.0)  # 障碍物第一个边界
        oy.append(i)
    for i in range(0, 40):
        ox.append(40.0)  # 障碍物第二个边界
        oy.append(60.0 - i)

    if show_animation:  # pragma: no cover
        plt.plot(ox, oy, ".k")  # 障碍物用黑色的.表示
        plt.plot(sx, sy, "og")  # 起始点绿色的o表示
        plt.plot(gx, gy, "xb")  # 目标点用蓝色的x表示
        plt.grid(True)
        plt.axis("equal")

    dijkstra = Dijkstra(ox, oy, grid_size, robot_radius)  # 申请一个对象
    rx, ry = dijkstra.planning(sx, sy, gx, gy)

    if show_animation:  # pragma: no cover
        plt.plot(rx, ry, "-r")
        plt.pause(0.01)
        plt.show()


if __name__ == '__main__':
    main()
